/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,10],$V3=[1,9],$V4=[2,5,11,19,24,25],$V5=[1,28],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[22,26,27,28,29,36,37,38,39,40,41,42,43],$Vr=[1,50],$Vs=[22,26,27,36,37,38,39,40,41,42,43],$Vt=[22,36,37,42,43],$Vu=[22,36,37,38,39,40,41,42,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEFIF":7,"DEFWHILE":8,"DEFPRINT":9,"PTCOMA":10,"LLAVEC":11,"BLOQUESENTENCIAS":12,"LLAVEA":13,"TYPE":14,"RINT":15,"RDOUBLE":16,"RBOOLEAN":17,"RCHAR":18,"RIF":19,"PARA":20,"EXPRESION":21,"PARC":22,"RELSE":23,"RPRINT":24,"RWHILE":25,"MAS":26,"MENOS":27,"POR":28,"DIV":29,"ENTERO":30,"DECIMAL":31,"CARACTER":32,"CADENA":33,"RTRUE":34,"RFALSE":35,"IGUALIGUAL":36,"DIFERENTE":37,"MENORQUE":38,"MAYORQUE":39,"MENOR_IGUAL":40,"MAYOR_IGUAL":41,"AND":42,"OR":43,"NOT":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PTCOMA",11:"LLAVEC",13:"LLAVEA",15:"RINT",16:"RDOUBLE",17:"RBOOLEAN",18:"RCHAR",19:"RIF",20:"PARA",22:"PARC",23:"RELSE",24:"RPRINT",25:"RWHILE",26:"MAS",27:"MENOS",28:"POR",29:"DIV",30:"ENTERO",31:"DECIMAL",32:"CARACTER",33:"CADENA",34:"RTRUE",35:"RFALSE",36:"IGUALIGUAL",37:"DIFERENTE",38:"MENORQUE",39:"MAYORQUE",40:"MENOR_IGUAL",41:"MAYOR_IGUAL",42:"AND",43:"OR",44:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[12,3],[14,1],[14,1],[14,1],[14,1],[7,5],[7,7],[7,7],[9,4],[8,5],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuando se haya reconocido la entrada completa retornamos la entrada traducida
		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5:
 this.$ = $$[$0]; 
break;
case 6: case 9:
 this.$ = $$[$0-1]; 
break;
case 7: case 8:
 
        console.log('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
    
break;
case 10:
 this.$ = new Tipo.default(Tipo.tipos.ENTERO); 
break;
case 11:
 this.$ = new Tipo.default(Tipo.tipos.DECIMAL); 
break;
case 12:
 this.$ = new Tipo.default(Tipo.tipos.BOOLEANO); 
break;
case 13:
 this.$ = new Tipo.default(Tipo.tipos.CARACTER); 
break;
case 14:
 this.$ = new If.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 15: case 16:
 this.$ = new If.default($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 17:
 this.$ = new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 18:
 this.$ = new While.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 19:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 21:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 22:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 23:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 24:
 this.$ = new Primitivo.default($$[$0], new Tipo.default(Tipo.tipos.ENTERO),_$[$0].first_line, _$[$0].first_column); 
break;
case 25:
 this.$ = new Primitivo.default($$[$0], new Tipo.default(Tipo.tipos.DECIMAL), _$[$0].first_line, _$[$0].first_column); 
break;
case 26:
 this.$ = new Primitivo.default($$[$0], new Tipo.default(Tipo.tipos.CARACTER),_$[$0].first_line, _$[$0].first_column); 
break;
case 27:
 this.$ = new Primitivo.default($$[$0], new Tipo.default(Tipo.tipos.CADENA),_$[$0].first_line, _$[$0].first_column); 
break;
case 28: case 29:
 this.$ = new Primitivo.default($$[$0], new Tipo.default(Tipo.tipos.BOOLEANO),_$[$0].first_line, _$[$0].first_column); 
break;
case 30:
 this.$ = new Relacional.default($$[$0-2], $$[$0], Relacional.OperadorRelacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 31:
 this.$ = new Relacional.default($$[$0-2], $$[$0], Relacional.OperadorRelacional.DIFERENCIACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 32:
 this.$ = new Relacional.default($$[$0-2], $$[$0], Relacional.OperadorRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 33:
 this.$ = new Relacional.default($$[$0-2], $$[$0], Relacional.OperadorRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 34:
 this.$ = new Relacional.default($$[$0-2], $$[$0], Relacional.OperadorRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 35:
 this.$ = new Relacional.default($$[$0-2], $$[$0], Relacional.OperadorRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36:
 this.$ = new Logica.default(Logica.OperadorLogico.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 37:
 this.$ = new Logica.default(Logica.OperadorLogico.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 38:
 this.$ = new Logica.default(Logica.OperadorLogico.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 39:
 this.$ = $$[$0-1] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,19:$V1,24:$V2,25:$V3},{1:[3]},{2:$V0,5:[1,11],6:12,7:4,8:5,9:6,19:$V1,24:$V2,25:$V3},o($V4,[2,3]),o($V4,[2,4]),o($V4,[2,5]),{10:[1,13]},{10:[1,14],11:[1,15]},{20:[1,16]},{20:[1,17]},{20:[1,18]},{1:[2,1]},o($V4,[2,2]),o($V4,[2,6]),o($V4,[2,7]),o($V4,[2,8]),{20:$V5,21:19,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:29,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:30,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{22:[1,31],26:$Ve,27:$Vf,28:$Vg,29:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp},{20:$V5,21:44,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},o($Vq,[2,24]),o($Vq,[2,25]),o($Vq,[2,26]),o($Vq,[2,27]),o($Vq,[2,28]),o($Vq,[2,29]),{20:$V5,21:45,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:46,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{22:[1,47],26:$Ve,27:$Vf,28:$Vg,29:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp},{22:[1,48],26:$Ve,27:$Vf,28:$Vg,29:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp},{12:49,13:$Vr},{20:$V5,21:51,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:52,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:53,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:54,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:55,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:56,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:57,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:58,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:59,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:60,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:61,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},{20:$V5,21:62,27:$V6,30:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,44:$Vd},o($Vq,[2,23]),o($Vq,[2,38]),{22:[1,63],26:$Ve,27:$Vf,28:$Vg,29:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp},{12:64,13:$Vr},{10:[2,17]},o($V4,[2,14],{23:[1,65]}),{2:$V0,4:66,6:3,7:4,8:5,9:6,19:$V1,24:$V2,25:$V3},o($Vs,[2,19],{28:$Vg,29:$Vh}),o($Vs,[2,20],{28:$Vg,29:$Vh}),o($Vq,[2,21]),o($Vq,[2,22]),o($Vt,[2,30],{26:$Ve,27:$Vf,28:$Vg,29:$Vh,38:$Vk,39:$Vl,40:$Vm,41:$Vn}),o($Vt,[2,31],{26:$Ve,27:$Vf,28:$Vg,29:$Vh,38:$Vk,39:$Vl,40:$Vm,41:$Vn}),o($Vu,[2,32],{26:$Ve,27:$Vf,28:$Vg,29:$Vh}),o($Vu,[2,33],{26:$Ve,27:$Vf,28:$Vg,29:$Vh}),o($Vu,[2,34],{26:$Ve,27:$Vf,28:$Vg,29:$Vh}),o($Vu,[2,35],{26:$Ve,27:$Vf,28:$Vg,29:$Vh}),o([22,42,43],[2,36],{26:$Ve,27:$Vf,28:$Vg,29:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:$Vm,41:$Vn}),o([22,43],[2,37],{26:$Ve,27:$Vf,28:$Vg,29:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo}),o($Vq,[2,39]),o($V4,[2,18]),{7:68,12:67,13:$Vr,19:$V1},{2:$V0,6:12,7:4,8:5,9:6,11:[1,69],19:$V1,24:$V2,25:$V3},o($V4,[2,15]),o($V4,[2,16]),o([2,5,11,19,23,24,25],[2,9])],
defaultActions: {11:[2,1],48:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Primitivo             = require('./Expresiones/Primitivo');
    const Aritmetica            = require('./Expresiones/Aritmetica');
    const Relacional            = require('./Expresiones/Relacional');
    const Logica                = require('./Expresiones/Logica');

    const Print                 = require('./Instrucciones/Print');
    const If                    = require('./Instrucciones/If');
    const While                 = require('./Instrucciones/While');

    const Tipo                  = require('./tablaSimbolos/Tipo');
    const Arbol                 = require('./tablaSimbolos/Arbol');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 15;
break;
case 4:return 16;
break;
case 5:return 18;
break;
case 6:return 17;
break;
case 7:return 24;
break;
case 8:return 19;
break;
case 9:return 23;
break;
case 10:return 34;
break;
case 11:return 35;
break;
case 12:return 25;
break;
case 13:return 10;
break;
case 14:return 13;
break;
case 15:return 11;
break;
case 16:return 20;
break;
case 17:return 22;
break;
case 18:return 26;
break;
case 19:return 27;
break;
case 20:return 28;
break;
case 21:return 29;
break;
case 22:return 42;
break;
case 23:return 43;
break;
case 24:return 40;
break;
case 25:return 38;
break;
case 26:return 41;
break;
case 27:return 39;
break;
case 28:return 36;
break;
case 29:return 'IGUAL';
break;
case 30:return 37;
break;
case 31:return 44;
break;
case 32: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 33; 
break;
case 33: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 	return 32; 
break;
case 34:return 31;
break;
case 35:return 30;
break;
case 36:return 'IDENTIFICADOR';
break;
case 37:return 5;
break;
case 38: 
                        console.log('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:while\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}